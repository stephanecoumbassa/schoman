version: '3.8'

# Docker Compose configuration for Schoman monitoring stack
# This sets up Prometheus, Grafana, and exporters for comprehensive monitoring

services:
  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: schoman_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'  # Keep data for 30 days
      - '--web.enable-lifecycle'
    networks:
      - schoman_monitoring
      - schoman_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: schoman_grafana
    restart: unless-stopped
    ports:
      - "3030:3000"  # Different port to avoid conflict
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - schoman_monitoring
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Exporter - Export MongoDB metrics to Prometheus
  mongodb-exporter:
    image: percona/mongodb_exporter:latest
    container_name: schoman_mongodb_exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
    command:
      - '--mongodb.uri=mongodb://mongodb:27017'
      - '--collect-all'
    networks:
      - schoman_monitoring
      - schoman_network
    depends_on:
      - prometheus

  # Redis Exporter - Export Redis metrics to Prometheus
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: schoman_redis_exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    command:
      - '--redis.addr=redis:6379'
    networks:
      - schoman_monitoring
      - schoman_network
    depends_on:
      - prometheus

  # Node Exporter - Export system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: schoman_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - schoman_monitoring

  # Alertmanager - Handle alerts from Prometheus (optional)
  alertmanager:
    image: prom/alertmanager:latest
    container_name: schoman_alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/prometheus/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - schoman_monitoring
    depends_on:
      - prometheus

networks:
  schoman_monitoring:
    driver: bridge
    name: schoman_monitoring
  schoman_network:
    external: true  # Connect to existing Schoman network

volumes:
  prometheus_data:
    name: schoman_prometheus_data
  grafana_data:
    name: schoman_grafana_data
  alertmanager_data:
    name: schoman_alertmanager_data
