name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests and Build
  backend:
    name: Backend Build & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      working-directory: ./backend
      run: npm ci

    - name: TypeScript compilation check
      working-directory: ./backend
      run: npm run build

    - name: Run tests
      working-directory: ./backend
      run: npm test
      continue-on-error: true

  # Frontend Tests and Build
  frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: TypeScript type check
      working-directory: ./frontend
      run: npm run type-check

    - name: Build application
      working-directory: ./frontend
      run: npm run build

  # Lint and Code Quality
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

  # Docker Build Test
  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Backend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: schoman-backend:test

    - name: Build Frontend Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: schoman-frontend:test

  # Integration Test with MongoDB
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend]

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18.x

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Wait for MongoDB
      run: |
        for i in {1..30}; do
          if mongosh --eval 'db.runCommand({ ping: 1 })' mongodb://localhost:27017/test > /dev/null 2>&1; then
            echo "MongoDB is ready"
            break
          fi
          echo "Waiting for MongoDB..."
          sleep 2
        done

    - name: Test MongoDB connection
      env:
        MONGODB_URI: mongodb://localhost:27017/schoman_test
        JWT_SECRET: test_secret_for_ci_testing
        NODE_ENV: test
      working-directory: ./backend
      run: |
        timeout 10s node -e "
          const mongoose = require('mongoose');
          mongoose.connect('$MONGODB_URI')
            .then(() => { console.log('MongoDB connection successful'); process.exit(0); })
            .catch(err => { console.error('MongoDB connection failed:', err); process.exit(1); });
        " || echo "Connection test completed"
